<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <AssemblyName>DevExpress.Dialogs.v22.2.Core</AssemblyName>
    <GenerateAssemblyInfo>False</GenerateAssemblyInfo>
    <TargetFramework>net40</TargetFramework>
  </PropertyGroup>
  <PropertyGroup>
    <LangVersion>11.0</LangVersion>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup>
    <RootNamespace />
  </PropertyGroup>
  <ItemGroup />
  <ItemGroup />
</Project>

using System.Reflection;

[assembly: AssemblyTitle("DevExpress.Dialogs.Core")]
[assembly: AssemblyDescription(null)]
[assembly: AssemblyCompany("Developer Express Inc.")]
[assembly: AssemblyProduct("DevExpress.Dialogs.Core")]
[assembly: AssemblyCopyright("Copyright © 2000-2022 Developer Express Inc.")]
[assembly: AssemblyTrademark(null)]
[assembly: AssemblyVersion("22.2.0.0")]


using System.Xml.Linq;
using System.Text;
using System.Diagnostics;

class Program
{
    const string InputFile = "merged_resources.xml";
    const string OutputDir = "GeneratedProjects";
    const string TargetFramework = "net40";
    const string Version = "22.2.0.0";

    static void Main()
    {
        Console.OutputEncoding = Encoding.UTF8;

        if (!File.Exists(InputFile))
        {
            Console.WriteLine($"Файл не найден: {InputFile}");
            return;
        }

        Console.WriteLine("Загрузка XML...");
        var doc = XDocument.Load(InputFile);

        var grouped = doc.Descendants("data")
            .Where(x => x.Attribute("name") != null)
            .GroupBy(x => x.Attribute("name")!.Value.Split('.')[0]);

        Directory.CreateDirectory(OutputDir);

        foreach (var group in grouped)
        {
            var project = group.Key;
            var projectDir = Path.Combine(OutputDir, project);
            Directory.CreateDirectory(projectDir);

            Console.WriteLine($"Генерация проекта: {project}");

            // 1. .resx
            var resxPath = Path.Combine(projectDir, $"{project}.resx");
            var resxDoc = new XDocument(
                new XDeclaration("1.0", "utf-8", null),
                new XElement("root", group)
            );
            resxDoc.Save(resxPath);

            // 2. AssemblyInfo.cs
            var asmInfoPath = Path.Combine(projectDir, "AssemblyInfo.cs");
            File.WriteAllText(asmInfoPath, $@"
using System.Reflection;

[assembly: AssemblyTitle(""{project}"")]
[assembly: AssemblyDescription(null)]
[assembly: AssemblyCompany(""Developer Express Inc."")]
[assembly: AssemblyProduct(""{project}"")]
[assembly: AssemblyCopyright(""Copyright © 2000-2022 Developer Express Inc."")]
[assembly: AssemblyTrademark(null)]
[assembly: AssemblyVersion(""{Version}"")]
");

            // 3. .csproj
            var csprojPath = Path.Combine(projectDir, $"{project}.csproj");
            File.WriteAllText(csprojPath, $@"
<Project Sdk=""Microsoft.NET.Sdk"">
  <PropertyGroup>
    <AssemblyName>{project}</AssemblyName>
    <GenerateAssemblyInfo>False</GenerateAssemblyInfo>
    <TargetFramework>{TargetFramework}</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedResource Include=""{project}.resx"" />
    <Compile Include=

